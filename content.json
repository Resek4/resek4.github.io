{"pages":[{"title":"HackStyle","text":"","link":"/HackStyle/index.html"},{"title":"Toolkit","text":"","link":"/Toolkit/index.html"}],"posts":[{"title":"精确翻译黑客范歌曲 AllTheThings","text":"前段时间国内安全圈流传了一首《Hacking Style》，忽然想起来看门狗 2 里同样也有一首歌词特别有黑客范儿的 Hip Hop，叫做《All The Things》网易云链接：http://music.163.com/song?id=32231380&amp;userid=361913487 歌词放在这（这歌网易云的歌词像是谷歌翻译的，所以我进行了很多改进）： “Not every geek with a commodore 64 can hack into NASA”“不是所有拥有 commodore64 计算机的黑客都能黑到 NASA”This one’s dedicated to all the hackers这首歌是献给所有黑客的 Even out settle score quick即使平均结算速度很快My disaster recovery requires even more disks我也需要更多的磁盘才能进行灾难恢复“Put your bytes up, prove it or you forfeit”“把你的‘字节’放在上面，从而证明它或者丧失它”Got my C64 and we blew it into orbit…拿到了我的 C64 计算机，接下来把它送入轨道… M. Bison with eight straight perfects就像是拜森打了八连胜（拜森，街头霸王反派角色）Overload emotions make hate, break circuits超负荷的情绪会制造仇恨，破坏电路In case you heard, it’s a name fake service倘若你听说了，这是一个伪造的服务Optimize our runtime to escape verdicts以优化我们的运行时间，避免出现错误Got an integer scope flow而他们只得到一个整数范围流That they can’t sign却还不能进行签名Passing code, didn’t sanitize因为密码问题依然没有被消除Command lines; land mine同样的还有命令行和“地雷” So before, they’ll see me after所以在此之前，他们会看到我的存在I’m Advice dog我是忠告之犬Courage Wolf勇气之狼Plus Philosoraptor同时也是个哲学家 Don’t prove we’re human unless we really hafta除非我们愿意，不然不要费力证明我们是些普通人My team built schemes that destroyed recaptcha我的团队建立了摧毁验证码的方案Hate what they see, finish this chapter他们痛恨他们所看到的，以便完成这个篇章By the way we’re not any geeks, we hack into NASA顺便说一句我们可不是普通的黑客，我们黑到了 NASA Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Got this Vodka and this Redbull喝了这瓶伏特加兑红牛They still give me wings醉意便赐我双翼So we drink all the booze所以我们痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物 Zero through Three从 0 到 3We’re in every single ring我们处在任何一个单独的环节中I’m just waiting until my blackberry dies我只是在等我的黑莓死掉（黑莓，手机品牌）Cause I’ll replace it with a raspberry pi之后我就可以用树莓派代替了（树莓派，Linux 微型电脑）Don’t compare to this track不要和这个轨道比较It makes everything they said dull它使他们所说一切都索然无味Neutralize any threat消除任何威胁Turn Red skull to /dev/null将“红骷髅”放进/dev/null （Linux 的空设备文件）They killed virus writers that we mentioned他们杀死了我们提到的病毒作者But instead they ascended to the VXHeavens却自己登上了 VXHeavens（知名共享恶意软件的站点）To reincarnate as live wires以作为新鲜血液再生Still inside we hide ciphers in signed device drivers然而我们仍在设备驱动程序中藏了密码Which school will we hit next?接下来我们要攻击哪个学校？They didn’t learn the format他们并不熟悉这种格式So we’ve gotta printf所以我们将使用 printf（C 语言打印函数）Next step is a chin check下一步要进行的是 chin checkFreestyles that I spit best这便是我最喜欢的 FreestyleThey didn’t decrypt yet他们依然没有解密成功I crush internet MC’s in rhyme battles我却已经押韵斗争中粉碎了那些网络 MC 们Get your WiFi tackled同时解决了你的 WiFi 问题Hak5 Pineapple用的是 Hak5 的菠萝派（一种无线审计设备）I don’t think you’ll like my snapple我不认为你会喜欢我的 snapple（饮料品牌）Cause I popped it with vodka因为我在里边兑了伏特加And a cyanide capsule还有一个氰化物胶囊 We drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Got this Vodka and this Redbull喝了这瓶伏特加兑红牛They still give me wings醉意便赐我双翼So we drink all the booze所以我们痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物“You know this could not be security, right?”“你知道这是不安全的，对吗”First we drink all the booze首先我们痛饮所有美酒Then we hack all the things然后我们黑尽一切事物 Then backdoor the firmware之后再通过后门打开固件On anything you bring不论你用的是什么Regardless of the hardware, service, or encoding硬件、服务还是编码Connected it to the internet只要把它连接到互联网And someone’s gonna own it就会有人拥有它This is for the pirates who clap这是送给那些鼓掌的盗版者And love the sound还有喜欢这掌声的人Attacking from the cloud我们从云端攻击Then we’re back in underground然后又来到线下There’s no masking from us now从现在开始我们不再遮掩We pop Tor nodes around the globe我们在全球范围内使用了 Tor 节点（可隐藏自己身份的网络代理服务器）Track and hunt you down以此将你追踪并抓捕Hacked on schedule, add it to your calendar安排好黑客日程，并将其写到日历上Devices online; here comes another challenger在在线设备上，又来了另一个挑战者State infiltrated, so undercover说他也已经完成渗透，看来同样是个地下高手This is for my comrades who stare at their debuggers这首歌送给那些盯着调试器的同志们（指逆向工程师）And trace every buffer他们追踪每个缓冲区Examining the code flow检查每个编码流“Haven’t been to sleep? Better pop another No-Doz”“还没有睡觉吗？不妨再服用另一片 NO-DOZ 吧”（抗疲劳药物）I think I’ll need a planet sized urn我想我需要一颗地球大小的骨灰盒Cause some men just wanna see the world burn因为有些人只想看这世界燃烧毁灭Your turn轮到你了 Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Got this vodka and this Redbull喝了这瓶伏特加兑红牛They still give me wings醉意便赐我双翼So we drink all the booze所以我们痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Zero through three从 0 到 3We’re in every single ring我们处在每一个圆环中 Hack all the things黑尽一切事物Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Hack-hack-hack all the things黑-黑-黑尽一切事物Hack-hack all the things痛饮-饮-饮尽所有美酒Zero through three从 0 到 3We’re in every single ring我们处在每一个圆环中Hack all the things黑尽一切事物“Yeah we’ll in good luck man”‘耶我们会交好运的’Drink all the booze痛饮所有美酒Hack all the things黑尽一切事物Got this vodka and this Redbull喝了这瓶伏特加兑红牛They still give me wings醉意便赐我双翼Drink-drink-drink all the things痛饮-饮-饮尽所有一切Drink all the vodka痛饮所有伏特加And hack all the booze黑尽一切美酒Drink all the booze痛饮所有美酒Hack all-Hack all the hackers黑尽一切-黑尽一切黑客们Hack-hack-hack all the hack黑-黑-黑尽一切黑客","link":"/2020/07/23/AllTheThings/"},{"title":"Learn the Blockchain","text":"Technical terms Word Description Cryptocurrency 加密货币 Cryptographic Hash Function 密码哈希函数 (CR)Collision Resistance 哈希碰撞 Message Digest 消息摘要 Digital Commitment 数字承诺 Puzzle friendly Bitcion的机制之一 Proof of work 工作量证明 Secure Hash Algorism SHA Asymmetric encryption algorism 非对称加密 Merkle Tree 默克尔树 Merkle Proof 默克尔证明 Binary Tree 二叉树 (TX)Transaction 交易 Root Hash 根哈希 Proof of inclusion/membership 包含证明 (SPV)Simplified Payment Verification 简化付款认证 Genesis Block 创世区块 Full node 全节点 Light node 轻节点 Coinbase Transaction(Tx) 铸币交易 Distributed Consensus 分布式共识 Longest Valid Chain rule 最长合法链原则 Block Reward 出块奖励 Cryptographic Hash Function2 Features: Collision Resistance$$A \\neq\\ B$$$$H(A) = H(B)$$To avoid this situation, expanding the Value space is necessary. One solution is appending a random number After the message A, and calculating the Hash result. This feature can’t be proven by math. Collision Resistance can make a message be a Message Digest, to detect the Tamper happening. 2 Features: Hiding Irreversibility: You can not get the A value if you only know the H(A) itself. The effect of Digital Sealed Envelop: Because of the hiding feature, Your message can do the forecasting stuff. The principle of Blockchain’s miningTo prevent the input space too small to cause the Collision Resistance problem, each block message should add a random nouce number after itself. The miner should use the hash algorithm to calculate this random nonce number, and if the Hash result approach this situation.$$H(A+nonce) \\leq\\ Target$$This block can be put on the blockchain, And the calculation can be looked at as the Proof of Work Also, The design model of blockchain should be difficult to solve, but easy to verify Asymmetric Encryption AlgorithmEncryption process: A uses B’s public key to encode the message, and B uses its private key to decode it.Signature process: A uses its private key to encode the message, and B uses A’s public key to decode it. The Signature process was used when encapsulating a transaction(Tx) block, to prove the initiator of the transaction. The process of “encryption” was used when describing the number of transactions, to prove the actual transaction amount The public or private key should use a great random source to ensure its randomness. Data structure Blockchain is a linked list using a hash pointer. Blockchain uses the Merkle tree to create itself. There are two kinds of nodes to save the transaction information.Full node: Include both the Block header and the Block body.Light node: Only include the Block header(according to the SPV), like the mobile application. Every transaction should base on a theory: Who transacting, who proving When a light node wants to prove a transaction(Tx) is real, it should: Send a request to the full node, contains with the Tx’s hash. The full node uses the Tx’s hash to search the entire Merkle tree’s branch and provides the Red H() to the light node. The light node uses the Red H() and combines the currently Tx’s Hash(Green H()) to verify the hash of the block, until to the Root hash. If the verify completely right, then the transaction can be proved right either. When a light node wants to prove a transaction(Tx) is not real, it should: Send a request to the full node, contains with the Tx’s hash. The full node sorts all the blocks based on their hash values and returns Tx’s before and after blocks hash to the light node. The light node calculates the Block Hash which combines the before and after block until to the root hash, if the root hash is the same as the current one, then this transaction is unreal(Because this transaction never exists, so the hash wasn’t changed).On the contrary, if the transaction truly existed, the result of the block hash around the Tx, mustn’t be the current one. ProtocolBasic TheoryAny type of token should have two sides features: Authentication of the token’s issuerTo ensure the token’s reality Transaction Log(Release Code, Transaction information, etc…)To ensure the token was created by the issuer, not the copying. Each transaction has two ‘inputs’ and 1 ‘outputs’: Inputs: Coin’s source and Sender’s public key Outputs: Receiver’s public key The coin’s source ensures this transaction’s reality.The sender’s public key ensures the sender is not fake. (But attention, this public key comes from the Coinbase Block, not the sender itself) The receiver’s public key enlights this transaction’s hash pointer. (transfer to whom). A block always encapsulates many transactions(Tx), all of these transactions combine into a block as a Merkle tree, and the quantity of these transactions is called the block’s height. A full node block has two parts of it: Block header, Block body The Block header was made up of these below things: Blockchain version Hash of the previous block header. (Hash pointer) Merkle tree hash target(nBits) nonce ConsensusA main feature of blockchain is [[Distributed Consensus]]In the Bitcoin system, if it wants to reach the distributed consensus, the system must consider the membership of all nodes.It can not make any decisions by the number of accounts, cause it may lead to the [[Sybil Attack]].So, using the Calculating power(By letting the miner calculate the nouce, “solve the problem”) to measure the membership is a better way to reach consensus. Longest Valid Chain RuleThe blockchain tends to let the longest chain be the main chain.If this situation happens(like the image below): A transfers $5 to B, then A transfers the same money to the fake A(A’), it may lead to the [[Forking Attack]], but if there is another transaction after the A to B Tx, according to the longest chain rule, the attack couldn’t happen. However, If two valid blocks make the chain forked, then the blockchain would choose the smaller delay one as the main chain. And the other block will be orphaned, called the Orphan block. [[Selfish Mining]] is also follow the Longest Valid Chain Rule. AchieveThis is a piece of classic block information: UTXO A full node also can do the [[UTXO]](Unspent Transaction Output) stuff. Mining Theory The Bitcoin system is always waiting for 6 confirmations to confirm a transaction(6 transactions before) is irrevocable. Miner will get the reward by mining(package the block, solve the difficulty), the reward contains two parts: Block Reward Bitcoin is secured by mining, mining is better than voting by the membership.The Bitcoin system regulates that Every 21000 blocks the block rewards be decreased by half. On average, the Bitcoin system will create a block per 10 minutes, which means 21000 blocks will cost 4 years, which means every 4 years the Block Reward will be decreased by half. Although the Block Reward is decreasing, the value of Bitcoin itself increasing year by year. So the motivation for mining is also sufficient. The Bitcoin system always adjusts the target difficulty to make the average Block time to be 10 minutes every block. Gradually, the trend will become a Geometric Series, and the total BTC is stable: 21000000 BTCIt means that there is half of BTC at least has been mined in past. Transaction FeeEach transaction always satisfies this relation:$$Total\\ Inputs \\geq Total\\ Outputs$$For example, if A wants to transfer 1 BTC to B and B can only receive 0.99 BTC, The 0.1 BTC is the Transaction Fee to pay for the miner. Mining Distribution Every mining action can seem like a [[Bernoulli Trail]], these Bernoulli Trail constitute the Bernoulli Process(A sequence of independent Bernoulli trials)The Bernoulli Trail’s memoryless feature guarantees the blockchain’s fairness, imagine that a node has the 10 times calculating power of another one, if the system is memorable, the advantage of the high power node will expand unlimitedly, then the weak one has no chance to defeat it ever. Because mining blocks is a low probably process, all the mining actions can seem like a [[Poisson Distribution]]. From a global perspective, every block time of a blockchain is an [[Exponential Distribution]]. If the past behavior will not affect to the future’s, it called Progress Free Guarantee the Blockchain difficulty demandBecause these years, too many miners mining the block to guarantee the Blockchain difficulty demand, causing the nonce is a 32bits non-symbolic integer, so we could adjust the Merkle root hash and time(cause the transaction no need to record a specific time) to increase the difficulty. Legality of transactionEvery transaction has Input scripts and Output scripts. When the previous transaction’s Output Scripts stitch with the current transaction’s Input Scripts, and the scripts successfully run, which means the current transaction is legal. NetworkThe Bitcoin system is based on the application layer in the network, and it uses P2P(Peer to Peer) Overlay Network in its network layer. Bitcoin’s network is simple, and robust, but not efficient. When a node receives a message, it will “flood” to other neighbor nodes. (The neighbor is a logical concept, not a real geographic neighbor) The Bitcoin network follows the Best-effect Delivery standard. When a transaction wants to get into Blockchain, it will be joined into an aggregate by a node.","link":"/2022/08/14/BlockLearn/"},{"title":"一个黑客能用一台手机做到什么事情","text":"《看门狗2》里黑客Marcus见到自己偶像T-bone讲到： 我看着你曾经”战争驾驶“，并因此改装了我的十段变速脚踏车，然后在背包上加装天线 战争驾驶（WarDriving）就是指使用相应的硬件和软件打造的无线局域网侦察平台，通过徒步或利用相应交通工具的方式在各个城镇的每个街道寻找不设防的无线访问点(AP)的一种统称。 而它的存在，便是黑客对”便携性“这个需求的最大证明 和另一高票经历很相似，我初高中对安全感兴趣，却奈何家里不让随意使用电脑，自然打起了“从手机入手学安全”的心思，这么些年也折腾过不少安全相关APP，在这里大致汇总了下 并从软件、工具角度出发，带你了解黑客能用一部手机做些什么。 下面是正文：先讲讲和黑客直接相关的 0x00.针对不乐意折腾的人终端与连接类 JuiceSSH ConnectBot 终端模拟器 Termux VNC Viewer 编程类 Qpython 3/OL（python安卓端编程app，挺多版本，看需求） C4droid （安卓端编写C语言的app） AIDE Web （编写web相关语言） 各种厂商路由器、服务器app TP-LINK 天翼网关、天翼云电脑（放在这里说，因为前段时间在天翼云白嫖服务器实在太香了） … 其余类 ES文件浏览器 （没root的首选，现在广告有点烦人，不过也吊打那些手机自带的） IP Tools （一款个人比较喜欢的查局域网ip信息相关工具） Tasker （一款让你手机自动化起来的软件，用得好是神器，不过得花精力学习用法） Packet Capture （经典手机抓包软件，不会在电脑上搞burp代理的话还是蛮方便的） Github/Openhub/Coding （各种代码托管网站的手机版app） 0x01.针对乐意折腾的人说实话，“黑客精神”怎会嫌麻烦，不折腾的话很多吊炸天的功能你是开发不出来的这里的折腾特指：搞Root、刷机、adb操作，熬夜（滑稽）… 一般软件类 Shadowsocks/Shadowsocks R、各种VPN （科学上网，不多比比） cSploit/dSploit （贼牛逼的一个局域网攻击神器） zANTI （同上，但是听说动静较大，所以我基本还是用上面那个） MT管理器、Root Explorer （个人用RE较多，文件管理神器，吊打ES） Shodan （强大的联网设备搜索引擎，其功能参照：Zoomeye、Fofa等） Hacker’s Keyboard （如果不外接键盘，这个键盘软件绝对是我的心水，因为它优化了界面，更容易输入那些搞安全需要用到的字符） RF Analyzer （Nethuner自带，无线射频分析相关，我没怎么用过，毕竟360的Hackcube啥的都有自家的软件。。。） Nethunter VNC （Nethunter自带，不过我的版本老报错，所以自己还是使用 VNC Viewer较多） Tor （首先需要科学上网，然后你便可以通过这个全球代理软件隐蔽的进入暗网了） 其他某些软件自我感觉蛮花里胡哨，实际渗透中其实比较局限，我平常不太用，这里放下 （重头戏）框架类 首先祭上最牛逼的Kali Nethunter ！！！关于如何刷Kali Nethunter在这里放两个教程： 【教程】怎么成为一名“黑手党” 聊聊黑客手机 3.0 （余弦大大的文章） 做黑客不知道kali怎么行，有句老话：kali学得好，牢饭吃得早（大雾） 首先，你可以在终端使用绝大部分kali软件，如下： Metasploit （经典漏洞利用框架，是你从手机向世界发起攻击的不二选择（笑）） Nmap （老牌扫描器，现在仍是一把好手） Sqlmap （数据库注入神器） ettercap （局域网ARP欺骗工具） wifite （经典无线攻击工具，爆破wifi密码等） kali上工具太多了，用过的自然知道手机版的kali有多imba，唯一的硬伤就是“手机的处理速度”，不过瑕不掩瑜 Nethuner （Kali Nethunter自家系统集成的软件，功能丰富） MAC Changer（更改对外显示的设备MAC地址） DuckHunter HID （将自己的手机模拟为一个badusb，通过数据线插入设备即可造成危害） Pineapple Connector （Wifi Pineapple连接器，相当于简化了从浏览器直连，如果买的是某宝的国产大菠萝刚好能用上，如果买的是官方菠萝派，建议使用google play上人家自家的软件） DeAuth （流量洪水攻击） AndRax （也是一个集成了各种渗透工具的框架，当初Freebuff一推送我就直接去官网下载了初版，不过个人用的不多） Xposed框架 （这个必须要提，很多玩机的发烧友很喜欢在这个上面做文章，酷安上有一大堆模块），比方说我们可以： qq/微信秒抢红包 手机状态栏等各种奇妙美化 更牛逼的杀后台应用 这是一个玩机的深坑……. 我是萌萌哒的分割线 0x02.外挂相关虽说不只是单单一部手机了，但是在这里介绍一些以手机作为主体而向外扩展的外挂 分线器、转接线 （必备，自供电那种最好，手机的一个插线口过于限制我们黑客的想象力（笑）） TP-LINK TL-WN722N （适配kali的无线网卡，如果你要使用wifite，这个必备） Wifi Pineapple （wifi大菠萝，一个词描述就是“牛逼”，想要图形页面直接在手机浏览器输入ip就可访问，如果钟爱命令行，不妨尝试：“JuiceSSH+大菠萝”） 无线键盘 （手机上的屏幕键盘始终还是不方便，预算充足就买蓝牙的（罗技那款，100+），不足就在某宝买飞鼠键盘（30-40rmb）） 其他工具，与手机联合打组合拳（要不是在手机上ssh，有线连接，要不就是官方有手机版app） 树莓派 （不多说了，用手机ssh连上能做的事情太多） Proxmark3/4 （基于RFID的嗅探、克隆等操作，可用于破解ID/UID等卡片） PocketChip （一个我自己比较喜欢的Linux小玩具） Hackcube （360无线电研究院搞的便携式硬件平台） Badusb/USB Ninja （或者圈内小火龙大佬自己搞得hackusb） 我是萌萌哒的分割线 0x03.黑客情怀相关“黑客也是寻常人”（笑），以下罗列一些其他搞安全必知必备的软件 通过手机获取安全资讯 Telegram （即“电报”，除了些奇奇怪怪的channel（逃），有些资源，大佬的博客在这个上面都可以找到，比方说：余弦大佬的“灰袍推送”） Twitter （搞安全，缺不了与国际接轨，很多0day或是国外大牛的好文章都会在这上分享，只是比较考验英语水平） Feedly （如果你受不了短平快的碎片化信息，在Feedly上订阅一些大佬的博客不失为一个好习惯（虽然现在有些功能需要花钱让我很不爽）） Ins （如果你喜爱黑客文化，在这个上面你绝对能找到很多非常有创意的黑客文化元素） 通过手机看安全视频 Youtube （开玩笑呢，Blackhat、Defcon、Hak5各种频道都聚集在此，怎么能少得了这款软件） bilibili （作为新世纪的优秀青年，你应该敏锐的发觉：国内很多安全团队的内部培训视频非常喜欢上传b站，以及b站的直播） i春秋 （虽然手机版体验也就那样，不过仍是一个不错的安全学习平台） 最后，放上我的情怀黑莓镇楼： 本文由思而听网络科技有限公司-渗透部门：Resek4 原创编写，转载请告知我们 如果你对网络安全、渗透、黑客感兴趣，欢迎关注~","link":"/2020/05/27/%E9%BB%91%E5%AE%A2%E6%89%8B%E6%9C%BA/"},{"title":"(Neo)Vim, Help poor children in Uganda!","text":"Some hotkey to operate vimUse vim-plug in neovim The neovim config file is in ~/.config/nvim/init.vim we should create two directory ~/.config/nvim/autoload ~/.config/nvim/plugged 1mkdir -p ~/.config/nvim/autoload ~/.config/nvim/plugged 12# Download vim-plugcurl -fLo ~/.config/nvim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Append new lines in vim config file(Neovim is in ~/.config/nvim/init.vim) 123call plug#begin('~/.config/nvim/plugged')Plug 'vim-airline/vim-airline'call plug#end() Then,reload the config file,change vim to the command mode, tap these 1:PlugInstall And you have completely installed the vim-plug Single option to edit Command a could get into the insert mode after the current character. Command Shift + a could get into the insert mode at the last of the current line. The command i could get into the insert mode before the current character. Command Shift+ i could get into the insert mode at the begin of the current line. Command o could get into the insert mode at the next line beginning. Command Shift+o could get into the insert mode at the previous line beginning. Command u could undo the previous actoin. We can use &quot; to comment the vimrc In the command mode,keyword % means the current file itself. We can use $ to move the cursor to the end of a line 1&lt;operation&gt; &lt;motion&gt; # The command format is Kind of this mode d command is the delete keyWhen we use d+Right+3,means delete 3 letters on the right side Tap: set spell，the incorrect syntax will be found. choose a incorrect word,tapz=,then,you will find lots of words advice from vim. When you jump to another place,you want to go back to the previous code block,you could use Ctrl + o,also,you could use Ctrl + i to go back again When your cursor is on a filepath，tap gf to open it within the current window(then you can also tap Ctrl + o to go back to the previous file) ⭐️Tip oneIf you are editing a /etcfile but don’t have the root privilege,and exit will lose the contents forever.Then you can tap these commands to save your data 1: w !sudo tee % then you input some enter will be rightAttention: this command is perfect to run in vim,but not neovim ⭐️Tip twowe can append a rule in vimrc,like 1map \\&lt;LEADER&gt;\\&lt;LEADER&gt; \\&lt;Esc&gt;/&lt;++&gt;\\&lt;CR&gt;: nohlsearch\\&lt;CR&gt;c4l From now on,if we write &lt;++&gt; in a file,then we tap double spaces we can change new characters replacing the previous one. ⭐️Tip threea combo with figlet install the figlet(brew install figlet) tap these commands to insert a figlet words into the file 1: r !figlet NICE then we’ll get this one ⭐️Tip fourprint the vim file into the HTML format (will open another vim window) 1%TOhtml when we tap wq in the new genarete file,we can open it with the browser Edit the vimrcUse map to custom the keybindCustom setting12345678910111213141516171819202122232425262728# increase the line numberset number# syntax highlightingsyntax on# add a underline on current editing lineset cursorline# use Tab to complete the commandset wildmenu# make text auto fit current windowset wrap# make your vim adapted with the elder versionset nocompatible# custom the indent(when you use python or other language),There must be no spaces around the &quot;=&quot;set tabstop=2set shiftwidth=2set softtabstop=2# make your editing line always keep the medium of your screenset scrolloff=5# use the option,we could restore the editing position latest edited when we open the file again next timeau BufReadPost * if line(&quot;'\\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;'\\&quot;&quot;) &lt;= line(&quot;$&quot;) | exe &quot;normal! g'\\&quot;&quot; | endif map123456789# tap j,means kmap j k# tap Ctrl+s，means :wq+entermap &lt;C-s&gt; :wq&lt;CR&gt;# deny the recursive querynoremap j k Special keys 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859notation meaning equivalent decimal value(s)-----------------------------------------------------------------------&lt;Nul&gt; zero CTRL-@ 0 (stored as 10) &lt;Nul&gt;&lt;BS&gt; backspace CTRL-H 8 backspace&lt;Tab&gt; tab CTRL-I 9 tab Tab linefeed&lt;NL&gt; linefeed CTRL-J 10 (used for &lt;Nul&gt;)&lt;FF&gt; formfeed CTRL-L 12 formfeed&lt;CR&gt; carriage return CTRL-M 13 carriage-return&lt;Return&gt; same as &lt;CR&gt; &lt;Return&gt;&lt;Enter&gt; same as &lt;CR&gt; &lt;Enter&gt;&lt;Esc&gt; escape CTRL-[ 27 escape &lt;Esc&gt;&lt;Space&gt; space 32 space&lt;lt&gt; less-than &lt; 60 &lt;lt&gt;&lt;Bslash&gt; backslash \\ 92 backslash &lt;Bslash&gt;&lt;Bar&gt; vertical bar | 124 &lt;Bar&gt;&lt;Del&gt; delete 127&lt;CSI&gt; command sequence intro ALT-Esc 155 &lt;CSI&gt;&lt;xCSI&gt; CSI when typed in the GUI &lt;xCSI&gt;&lt;EOL&gt; end-of-line (can be &lt;CR&gt;, &lt;LF&gt; or &lt;CR&gt;&lt;LF&gt;, depends on system and 'fileformat') &lt;EOL&gt;&lt;Up&gt; cursor-up cursor-up cursor_up&lt;Down&gt; cursor-down cursor-down cursor_down&lt;Left&gt; cursor-left cursor-left cursor_left&lt;Right&gt; cursor-right cursor-right cursor_right&lt;S-Up&gt; shift-cursor-up&lt;S-Down&gt; shift-cursor-down&lt;S-Left&gt; shift-cursor-left&lt;S-Right&gt; shift-cursor-right&lt;C-Left&gt; control-cursor-left&lt;C-Right&gt; control-cursor-right&lt;F1&gt; - &lt;F12&gt; function keys 1 to 12 function_key function-key&lt;S-F1&gt; - &lt;S-F12&gt; shift-function keys 1 to 12 &lt;S-F1&gt;&lt;Help&gt; help key&lt;Undo&gt; undo key&lt;Insert&gt; insert key&lt;Home&gt; home home&lt;End&gt; end end&lt;PageUp&gt; page-up page_up page-up&lt;PageDown&gt; page-down page_down page-down&lt;kHome&gt; keypad home (upper left) keypad-home&lt;kEnd&gt; keypad end (lower left) keypad-end&lt;kPageUp&gt; keypad page-up (upper right) keypad-page-up&lt;kPageDown&gt; keypad page-down (lower right) keypad-page-down&lt;kPlus&gt; keypad + keypad-plus&lt;kMinus&gt; keypad - keypad-minus&lt;kMultiply&gt; keypad * keypad-multiply&lt;kDivide&gt; keypad / keypad-divide&lt;kEnter&gt; keypad Enter keypad-enter&lt;kPoint&gt; keypad Decimal point keypad-point&lt;k0&gt; - &lt;k9&gt; keypad 0 to 9 keypad-0 keypad-9&lt;S-...&gt; shift-key shift &lt;S-&lt;C-...&gt; control-key control ctrl &lt;C-&lt;M-...&gt; alt-key or meta-key meta alt &lt;M-&lt;A-...&gt; same as &lt;M-...&gt; &lt;A-&lt;D-...&gt; command-key (Macintosh only) &lt;D-&lt;t_xx&gt; key with &quot;xx&quot; entry in termcap Split your vim workspaceEdit the vim config file~/.config/nvim/init.vim,then append these configurations 12345678910111213141516# set a mapleader keylet mapleader = &quot; &quot;# horizontal split your vim workspacemap `h :set nosplitright&lt;CR&gt;:vsplit&lt;CR&gt;map `l :set splitright&lt;CR&gt;:vsplit&lt;CR&gt;# vertical split your vim workspacemap `j :set nosplitbelow&lt;CR&gt;:split&lt;CR&gt;map `k :set splitbelow&lt;CR&gt;:split&lt;CR&gt;# move your cursor to the other workspacemap &lt;LEADER&gt;h &lt;C-w&gt;hmap &lt;LEADER&gt;j &lt;C-w&gt;jmap &lt;LEADER&gt;k &lt;C-w&gt;kmap &lt;LEADER&gt;l &lt;C-w&gt;l open another file,we can tap: e ~/try/2.txtto open another file in your vim Vim Tab Manager12345678# create a new tabmap tn :tabe&lt;CR&gt;# previous tabmap th :-tabnext&lt;CR&gt;# next tabmap tl :+tabnext&lt;CR&gt; Recoding a macro Tap q ,then Tap a Character you want,such as a Vim will recode a macro marked with a Do anything you want. Tap @ + a will execute the macro VISUAL LINEV-LINE modeTap the Shift+v could get into the V-LINE mode,and we could batch operate these lines. then,Tap the : ,we could input the batch operate the lines 123# Append 2022- to the beginning of these lines:normal I2022-# Tap the Enter key will see the changing V-BLOCK modeTap the Ctrl+v could get into the V-BLOCK mode,and we could batch operate the selected blocksthen,Tap the : ,we could input the batch operate the lines 12345678# Append 2022- to the beginning of these selected blocks，and Tap the Enter key will see the changing:normal I2022-# delete All the selected blocksd# edit an area in one line,and take effect to all the lines(Tap Esc to make it effective when you have edited)Shift + i Vim-Plugspreservim/nerdcommenter Use space(My &lt;LEADER&gt;) + cc to add a comment User space(My &lt;LEADER&gt;) + cu to cancel a comment tpope/vim-surround Use cs&quot;' can change the word surrounding become to ' from &quot; Use cs&quot;&lt;q&gt; can change the word surrounding become to &lt;q&gt; from &quot; Use ds&quot;can cancel the word surrounding tmhedberg/SimpylFold Use zo to open a folded code block Use zc to close a fold CoC Use space + r + n to rename a variable mbbill/undotreeAdd a configuration to the init.vim 1nnoremap &lt;C-h&gt; :UndotreeToggle&lt;CR&gt; Use Ctrl + H to open the undotree toggle FzFAdd a configuration to the init.vim 12345678nnoremap &lt;Leader&gt;C :Colors&lt;CR&gt;nnoremap &lt;Leader&gt;b :Buffers&lt;CR&gt;nnoremap &lt;Leader&gt;f :Files&lt;CR&gt;nnoremap &lt;Leader&gt;l :Lines&lt;CR&gt;nnoremap &lt;Leader&gt;ag :Ag &lt;C-R&gt;&lt;C-W&gt;&lt;CR&gt;nnoremap &lt;Leader&gt;AG :Ag &lt;C-R&gt;&lt;C-A&gt;&lt;CR&gt;xnoremap &lt;Leader&gt;ag y:Ag &lt;C-R&gt;&quot;&lt;CR&gt;nnoremap &lt;Leader&gt;` :Marks&lt;CR&gt; Use \\&lt;LEADER&gt; + f to search files NerdTreeAdd a configuration to the init.vim 1nnoremap &lt;C-f&gt; :NERDTreeFind&lt;CR&gt; Use Ctrl + f to open the NerdTree mhinz/vim-startifyJust install the pluggin is well mg979/vim-visual-multi When you cursor a word,tap Ctrl + n to select a word and get into the visual-multi mode Then you can change them batching","link":"/2022/06/23/vim/"}],"tags":[],"categories":[{"name":"HackStyle","slug":"HackStyle","link":"/categories/HackStyle/"},{"name":"Toolkit","slug":"Toolkit","link":"/categories/Toolkit/"},{"name":"TechLearning","slug":"TechLearning","link":"/categories/TechLearning/"}]}